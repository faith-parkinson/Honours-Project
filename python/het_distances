# Heterozygous sites were isolated by bash in the chromosomes where mutations occurred 
# vcftools --gzvcf OG_chroms/chr02.raw.vcf.gz --indv MB170708 --remove-indels --recode --out snps_only_chr02
# followed by
# bcftools view -i 'GT="0/1"' snps_only_chr02.recode.vcf -Oz -o MB170708_chr02_hets.vcf.gz
# The first file names are the inputs, final ones are the output

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from cyvcf2 import VCF
import glob
import bisect
import random

# To combine VCFs for MB170708 from a folder
vcf_paths = sorted(glob.glob("actual_data/parent_het_sites/MB170708_hets/*.vcf.gz")) 

positions = []

for path in vcf_paths:
    vcf = VCF(path)
    for variant in vcf:
        chrom = variant.CHROM
        pos = variant.POS
        positions.append((chrom, pos))

# Outputs to a tsv of het sites
with open("MB170708_het_sites.tsv", "w") as out:
    for chrom, pos in positions:
        out.write(f"{chrom}\t{pos}\n")
  

# For mutations phased to MB170708
MB170708_hets = pd.read_csv("MB170708_het_sites.tsv", sep='\t', header=None)
MB170708_hets.columns = ['chromosome', 'position']

# Dataframe of only mutations phased to MB170708
male_phased_muts = pd.read_csv('male_phased_muts.csv', header=None)
male_phased_muts.columns = ['chromosome', 'position', 'ID', 'family', 'change', 'mut_type', 'ts/tv', 'compressed_type']

# Function to find the distance to the nearest heterozygous site
def find_nearest_distance(row, df):
    chrom = row['chromosome']
    pos = row['position']
    het_chr = df_het[(df['chromosome'] == chrom) & (df['position'] != pos)] 
    if het_chr.empty:
        return np.nan
    return np.abs(het_chr['position'] - pos).min()

# Adds a new column to the dataframe with the distance to the nearest het site
male_phased_muts['nearest_het_distance'] = male_phased_muts.apply(lambda row: find_nearest_distance(row, MB170708_hets), axis=1)

# Same process is repeated for MB170702 and the female phased mutations


# For unphased muts, it was the nearest heterozygous site in either parent
# Combines the het sites of the parents
parents_hets = pd.concat([MB170702_hets, MB170708_hets], ignore_index=True)
parents_hets_unique = parents_hets.drop_duplicates()

unphased_muts = pd.read_csv('unphased_muts.csv', header=None)
unphased_muts.columns = ['chromosome', 'position', 'ID', 'family', 'change', 'mut_type', 'ts/tv', 'compressed_type']

unphased_muts['nearest_het_distance'] = unphased_muts.apply(lambda row: find_nearest_distance(row, parents_hets_unique), axis=1)

# The median distance of the real mutations to the nearest heterozygous site was found manually 


# To generate the random medians and compare them to the median from the mutations:
  
all_distances = [] # allows for distributions of the distances from random sites to be plotted 

mut_med = 21 # median from the mutations
num_trials = 1000 # number of trials
num_positions = 19 # number of mutations
chroms = ["chr02", "chr02", "chr04", "chr05", "chr06", "chr08", "chr10", "chr11", "chr12", "chr13", "chr17", "chr18", "chr22", "chr29"]

# Sort the heterozygous positions by chromosome
het_dict = {}
for chrom in parents_hets_unique["chromosome"].unique():
    het_dict[chrom] = sorted(parents_hets_unique[parents_hets_unique["chromosome"] == chrom]["position"].values)

# Different function to find the nearest heterozygous sites because it's no longer using a dataframe
def find_nearest_random(pos_list, query):
    idx = bisect.bisect_left(pos_list, query)
    candidates = []
    if idx > 0:
        candidates.append(abs(pos_list[idx - 1] - query))
    if idx < len(pos_list):
        if pos_list[idx] != query:
            candidates.append(abs(pos_list[idx] - query))
    return min(candidates) if candidates else np.nan

# Permutaion test
results = []
for i in range(num_trials):
    random_positions = [] # Randomly sample 19 positions across the chromosomes
    for _ in range(num_positions):
        chrom = random.choice(chroms)
        pos = random.randint(min(het_dict[chrom]), max(het_dict[chrom]))
        random_positions.append((chrom, pos))

    # Find the distance to nearest het site for each random position
    distances = []
    for chrom, pos in random_positions:
        nearest_dist = find_nearest_random(het_dict[chrom], pos)
        distances.append(nearest_dist)

    # Calculated median distance for each set of 19
      med_dist = np.median(distances)
      all_distances.extend(distances)
      result = {
          "med_distance": med_dist,
          "compared_to_ref": "higher" if med_dist > mut_med else "lower"
      }
      results.append(result)

df_results = pd.DataFrame(results)
print(df_results["compared_to_ref"].value_counts())




