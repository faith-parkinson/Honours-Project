import numpy as np
from cyvcf2 import VCF
import pandas as pd 
import subprocess

# Establish file path to the VCF of the simulated mutations
vcf_file = '4_variants/mil_sim31.vcf.gz'

# Generates a list of individuals in the VCF for selecting individuals by indexing (from Thomas Decroly)
_stdout = subprocess.check_output(f"bcftools query -l {vcf_file}", shell=True, text=True)
samples = np.array([sample_id for sample_id in _stdout.split("\n") if sample_id], dtype=str)
samples

# Define family, parents and kids using indexes
simfam = [0, 1, 2, 3, 4, 5, 6, 7]
sim_rents = simfam[:2]
kids = [2, 3, 4, 5, 6, 7]

# Compare candidate mutations to true ones
data = []
for i in kids:
    file = (f'1_reads/{samples[i]}.mutations.txt') # Calls the files generated by dwgsim for each simulated child, detailing the simulated mutations 
    muts = pd.read_csv(f'{file}', sep='\t', names=['chromosome', 'position', 'reference', 'new IUPAC', 'strand'])
    muts['ID'] = (f'{samples[i]}')
    data.append(muts)
true_muts = pd.concat(data, ignore_index=True)
homozygous = ['A', 'C', 'G', 'T']
true_hetmuts = true_muts[~true_muts['new IUPAC'].isin(homozygous)] # Removes homozygous mutations, which can't be picked up by the candidates code

pot_muts = pd.read_csv('mil_sim31.mut.tsv', sep='\t') # Takes the file generated by the candidates code, containing the callable mutations

merged_muts = pd.merge(true_muts, pot_muts, on=['position', 'ID'], how='inner') # Identifies how many simulated mutations are in the candidates - removes false positives

duplicates = len(merged_muts)
total = len(true_hetmuts)

callable_sites = duplicates/total # Calculates callability
print(callable_sites)
